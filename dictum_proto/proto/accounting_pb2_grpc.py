# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from dictum_proto.proto import account_audit_pb2 as proto_dot_account__audit__pb2
from dictum_proto.proto import account_balance_pb2 as proto_dot_account__balance__pb2
from dictum_proto.proto import accounting_pb2 as proto_dot_accounting__pb2
from dictum_proto.proto import tag_pb2 as proto_dot_tag__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/accounting_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AccountingStub(object):
    """Сервис не используется!
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAccountBalances = channel.unary_unary(
                '/Accounting/ListAccountBalances',
                request_serializer=proto_dot_accounting__pb2.ListAccountBalancesRequest.SerializeToString,
                response_deserializer=proto_dot_accounting__pb2.ListAccountBalancesResponse.FromString,
                _registered_method=True)
        self.GetAccountAudit = channel.unary_unary(
                '/Accounting/GetAccountAudit',
                request_serializer=proto_dot_accounting__pb2.GetAccountAuditRequest.SerializeToString,
                response_deserializer=proto_dot_account__audit__pb2.AccountAudit.FromString,
                _registered_method=True)
        self.GetAccountBalance = channel.unary_unary(
                '/Accounting/GetAccountBalance',
                request_serializer=proto_dot_accounting__pb2.GetAccountBalanceRequest.SerializeToString,
                response_deserializer=proto_dot_account__balance__pb2.AccountBalance.FromString,
                _registered_method=True)
        self.CreateAccountBalance = channel.unary_unary(
                '/Accounting/CreateAccountBalance',
                request_serializer=proto_dot_accounting__pb2.CreateAccountBalanceRequest.SerializeToString,
                response_deserializer=proto_dot_account__balance__pb2.AccountBalance.FromString,
                _registered_method=True)
        self.ListAccrualStatusTransitions = channel.unary_unary(
                '/Accounting/ListAccrualStatusTransitions',
                request_serializer=proto_dot_accounting__pb2.ListAccrualStatusTransitionsRequest.SerializeToString,
                response_deserializer=proto_dot_accounting__pb2.ListAccrualStatusTransitionsResponse.FromString,
                _registered_method=True)
        self.ListTags = channel.unary_unary(
                '/Accounting/ListTags',
                request_serializer=proto_dot_accounting__pb2.ListTagsRequest.SerializeToString,
                response_deserializer=proto_dot_accounting__pb2.ListTagsResponse.FromString,
                _registered_method=True)
        self.CreateTag = channel.unary_unary(
                '/Accounting/CreateTag',
                request_serializer=proto_dot_accounting__pb2.CreateTagRequest.SerializeToString,
                response_deserializer=proto_dot_tag__pb2.Tag.FromString,
                _registered_method=True)


class AccountingServicer(object):
    """Сервис не используется!
    """

    def ListAccountBalances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountAudit(self, request, context):
        """rpc ListAccountAudits(ListAccountAuditsRequest) returns (ListAccountAuditsResponse) {
        option (google.api.http) = {
        get: "/v1/{parent=accounts/*}/audits"
        };
        }

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccrualStatusTransitions(self, request, context):
        """--
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAccountBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccountBalances,
                    request_deserializer=proto_dot_accounting__pb2.ListAccountBalancesRequest.FromString,
                    response_serializer=proto_dot_accounting__pb2.ListAccountBalancesResponse.SerializeToString,
            ),
            'GetAccountAudit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountAudit,
                    request_deserializer=proto_dot_accounting__pb2.GetAccountAuditRequest.FromString,
                    response_serializer=proto_dot_account__audit__pb2.AccountAudit.SerializeToString,
            ),
            'GetAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountBalance,
                    request_deserializer=proto_dot_accounting__pb2.GetAccountBalanceRequest.FromString,
                    response_serializer=proto_dot_account__balance__pb2.AccountBalance.SerializeToString,
            ),
            'CreateAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccountBalance,
                    request_deserializer=proto_dot_accounting__pb2.CreateAccountBalanceRequest.FromString,
                    response_serializer=proto_dot_account__balance__pb2.AccountBalance.SerializeToString,
            ),
            'ListAccrualStatusTransitions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccrualStatusTransitions,
                    request_deserializer=proto_dot_accounting__pb2.ListAccrualStatusTransitionsRequest.FromString,
                    response_serializer=proto_dot_accounting__pb2.ListAccrualStatusTransitionsResponse.SerializeToString,
            ),
            'ListTags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTags,
                    request_deserializer=proto_dot_accounting__pb2.ListTagsRequest.FromString,
                    response_serializer=proto_dot_accounting__pb2.ListTagsResponse.SerializeToString,
            ),
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=proto_dot_accounting__pb2.CreateTagRequest.FromString,
                    response_serializer=proto_dot_tag__pb2.Tag.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Accounting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Accounting', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Accounting(object):
    """Сервис не используется!
    """

    @staticmethod
    def ListAccountBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/ListAccountBalances',
            proto_dot_accounting__pb2.ListAccountBalancesRequest.SerializeToString,
            proto_dot_accounting__pb2.ListAccountBalancesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAccountAudit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/GetAccountAudit',
            proto_dot_accounting__pb2.GetAccountAuditRequest.SerializeToString,
            proto_dot_account__audit__pb2.AccountAudit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/GetAccountBalance',
            proto_dot_accounting__pb2.GetAccountBalanceRequest.SerializeToString,
            proto_dot_account__balance__pb2.AccountBalance.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/CreateAccountBalance',
            proto_dot_accounting__pb2.CreateAccountBalanceRequest.SerializeToString,
            proto_dot_account__balance__pb2.AccountBalance.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccrualStatusTransitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/ListAccrualStatusTransitions',
            proto_dot_accounting__pb2.ListAccrualStatusTransitionsRequest.SerializeToString,
            proto_dot_accounting__pb2.ListAccrualStatusTransitionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/ListTags',
            proto_dot_accounting__pb2.ListTagsRequest.SerializeToString,
            proto_dot_accounting__pb2.ListTagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounting/CreateTag',
            proto_dot_accounting__pb2.CreateTagRequest.SerializeToString,
            proto_dot_tag__pb2.Tag.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
